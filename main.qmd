---
title: "TFG"
format: html
editor: source
---

# Librerías

```{r}
#| warning: false
rm(list = ls())
library(pdftools)
library(tidyverse)
library(readxl)
library(zoo)
library(sf)
library(gt)
library(gtsummary)
library(ggpubr)
library(did)
```

```{r}
theme_tfg <- theme_minimal() +
  theme(axis.title.x = element_blank(),
        axis.text = element_text(color = "black"),
        axis.line.x.bottom = element_line(color = "black"),
        axis.line.y.left = element_line(color = "black"),
        axis.ticks.y  = element_line(color = "black"),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())
```

# Carga de los Datos

Los datos se han obtenido de la [Massachussets DESE](https://hdl.handle.net/2452/833423), donde los institutos públicos de Massachusetts informaban de forma semanal el número de casos Covid-19 detectados entre el alumnado y el profesorado. Se ha descargado los reportes correspondientes a las 40 semanas del año escolar del curso 2021-2022, el último reporte analizado data del 16 de junio.

Los reportes constan de la siguiente estructura:

-   La primera página se corresponde a un resumen de los resultados obtenidos.

-   A partir de la segunda página se listan los distritos escolares junto al número de positivos entre el alumnado y el profesorado, así como el número de pruebas de grupo rutinarias, el número de positivos y su ratio.

-   A continuación, se muestra una tabla con los casos registrados en las organizaciones educativas colaboradoras.

-   Finalmente, se listan los casos registrados en los colegios aprobados de educación especial.

De este modo, el objetivo será extraer la información de las tablas correspondientes a la información de los distritos. Para ello, se ha implementado el siguiente código:

1.  **Listado de los archivos.** Se lista el nombre de los archivos pdf contenidos en la carpeta data/reportes_covid.

```{r}
archivos <- list.files("data/reportes_covid",pattern = ".pdf")
```

2.  **Extracción de los datos.** Implementamos una función que permita extraer la información deseada.

La función recibe cómo parámetro un iterable con el nombre de los archivos y devuelve un dataframe con los datos correspondientes al código del distrito, nombre del distrito, número de casos covid-19 en alumnos, número de casos covid-19 en profesores, número de pruebas de grupo rutinarias, número de positivos, ratio positivos/pruebas y la fecha del reporte, ésta será extraída del nombre del archivo.

```{r}
#| warning: false
obt_data_distritos <- function(archivos){
  
  fechas <- str_extract(string = archivos,
                        pattern = "\\d{4}-\\d{1,2}-\\d{1,2}")
  
  df <- data.frame(Code = NA,
                   Name = NA,
                   Students = NA,
                   Staff = NA,
                   PT = NA,
                   PPT = NA,
                   PPR = NA,
                   Date = NA)
  
  for(i in 1:length(archivos)){
  
  df2 <- pdf_text(paste0("data/reportes_covid/",archivos[i]))
  
  p <- 2
  
  fin <- FALSE
  
  while(fin == FALSE){
    if(p == 2){
      aux <- df2[[p]] %>%
        str_split("\n") %>%
        as_tibble(.name_repair=make.names)
      aux <- aux %>%
        slice(7:nrow(aux)) %>%
        separate(X, 
                 into = c("Code",
                          "Name",
                          "Students",
                          "Staff",
                          "PT",
                          "PPT",
                          "PPR"), 
                 sep = "\\s{2,}")%>%
      filter(Code != "") %>% 
        mutate(Date = fechas[i])
      
    }else{
      aux <- df2[[p]] %>%
      str_split("\n") %>%
      as_tibble(.name_repair=make.names) %>%
      separate(X, into = c("Code",
                           "Name",
                           "Students",
                           "Staff",
                           "PT",
                           "PPT",
                           "PPR"), 
               sep = "\\s{2,}") %>%
      filter(Code != "") %>% 
        mutate(Date = fechas[i])
    }
    df <- rbind(df,aux)
    
    p = p + 1
    
    fin <- grepl(pattern = "Education Collaboratives",df2[[p]])
  }
  
  }
  
  return(df)
}

df_raw <- obt_data_distritos(archivos)
```

3.  **Adecuación de las variables**. Se convierten al tipo adecuado las variables obtenidas y eliminamos las filas que contenga en la variable `Code` NAs.

```{r}
#| warning: false
df_raw <- df_raw %>%
  mutate(Students = as.numeric(Students),
         Staff = as.numeric(Staff),
         PT = as.numeric(PT),
         PPT = as.numeric(PPT),
         Date = as.Date(Date)) %>%
  filter(!is.na(Code)) %>%
  select(-PPR)

df_raw$PT[is.na(df_raw$PT)] <- 0
df_raw$PPT[is.na(df_raw$PPT)] <- 0
```

# Selección de los distritos escolares

A partir de los informes importados, se obtiene que 400 distritos escolares han reportado casos de COVID-19 a DESE. Sin embargo, para el estudio se han excluido los distritos metropolitanos, vocacionales y técnicos y se ha restringido a los distritos escolares incluidos en Boston-Newton-Cambridge New England City y Town Area (NECTA), resultando en un total de 79 distritos. Adicionalmente, se han excluido 7 distritos escolares debido a la inconsistencia de los datos enviados.

```{r}
selected_districts <- read_delim("data/selected_districts.csv", 
    delim = ";", escape_double = FALSE, trim_ws = TRUE)

selected_districts$Week_lifted <- as.factor(selected_districts$Week_lifted)

mapa_eeuu <- st_as_sf(maps::map("state",fill = TRUE, plot = FALSE))

mapa <- sf::st_read("data/schooldistricts/schooldistricts_poly.shp")

mapa <- mapa %>% select(ORG8CODE,geometry)

mapa <- mapa %>% 
  left_join(selected_districts %>% select(-Name), 
            by = c("ORG8CODE"="Code"))
mapa$Neighboring[is.na(mapa$Neighboring)] <- 4
mapa$Neighboring <- as.factor(mapa$Neighboring)

selected_districts$Neighboring <- as.factor(selected_districts$Neighboring)
```

```{r}
#| warning: false
ggplot() +
  geom_sf(data = mapa_eeuu, fill = "#f2f2f2") +
  geom_sf(data = mapa, aes(fill = Neighboring)) +
  stat_sf_coordinates(data = mapa %>% filter(Week_lifted == -1)) +
  scale_fill_manual(breaks = c(1,2,3,4),
                    values = c("#040613","#3f4b95","#62a9c7","#d9d9d9"),
                    labels = c("Boston/Chelsea\n(n=2)",
                               "Adyacentes\n(n=13)",
                               "Incluidos en NECTA\n(n=64)",
                               "No Incluidos en NECTA\n(n=211)")) +
  labs(title = "Distritos Escolares de Massachusetts", 
       fill = "Categoría\nDistrito\nEscolar\n(N = 290)") +
  coord_sf(xlim = c(-73.4,-70), ylim = c(41.25,42.85)) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.title = element_text(face="bold"))
```

```{r}
#| warning: false
ggplot() +
  geom_sf(data = mapa_eeuu, fill = "#f2f2f2") +
  geom_sf(data = mapa %>% filter(!is.na(Week_lifted) & Week_lifted != -1), 
          aes(fill = Week_lifted)) +
  geom_sf(data = mapa %>% filter(Week_lifted == -1), fill = NA) +
  stat_sf_coordinates(data = mapa %>% filter(Week_lifted == -1)) +
  scale_fill_manual(breaks = c(1,2,3,4),
                    values = c("#fcfccf","#5fbaa5","#53749f","#423645"),
                    labels = c("03-Mar-22\n(n=46)",
                               "10-Mar-22\n(n=17)",
                               "17-Mar-22\n(n=7)",
                               "Mantienen\n(n=2)")) +
  labs(title = "Distritos Escolares por la Semana en el que se Eliminó\nla Restricción de las Mascarillas", 
       fill = "Semana en el que la Restricción\nde las Mascarillas fue Eliminada") +
  coord_sf(xlim = c(-71.7,-70.6), ylim = c(42,42.7)) +
  theme_void() +
  theme(legend.position = "bottom",
        legend.title = element_text(face="bold"))
```

Así pues, se seleccionan de los reportes cargados los distritos escolares a estudiar.

```{r}
df_raw <- inner_join(df_raw,selected_districts %>% 
                   filter(Week_lifted != -1) 
                 %>% select(-Name))

length(unique(df_raw$Name))
```

Por otra parte, el distrito escolar de Brookline restauró la obligatoriedad de las mascarillas el 23-06-2022. De este modo, excluimos de las semanas de estudio aquellas posteriores a la introducción de la medida (las últimas tres semanas del periodo de estudio).

```{r}
df_raw <- df_raw %>% filter(!(Date >= as.Date("2022-06-02") & Name == "Brookline"))
```

A continuación se muestra una tabla con los datos sobre el porcentaje de casos pre-Omicron, durante la ola Omicron BA.1, y después de la eliminación de la restricción de la mascarilla.

```{r}
df_tabla <- df_raw %>%
  mutate(All = Students + Staff,
         Week = round(as.numeric((Date - as.Date("2021-09-9"))/7)),
         Group_week = case_when(Week <= 10 ~ 1,
                                Week >= 11 & Week <= 25 ~ 2,
                                Week >= 26 ~ 3)) %>%
  select(-c(PT,PPT,Date,Name,Week)) %>% 
  pivot_longer(c(Students,Staff,All), names_to = "names", values_to = "values")

df_tabla_aux <- df_tabla

df_tabla_aux <- df_tabla_aux %>% mutate(Week_lifted = "All")

df_tabla <- rbind(df_tabla, df_tabla_aux)

n_districts <- df_tabla %>% 
  group_by(Week_lifted) %>% 
  summarise(n = length(unique(Code)))

df_tabla <- df_tabla %>%
  group_by(Week_lifted, Group_week, names) %>%
  summarise(values = sum(values)) %>%
  left_join(n_districts) %>% 
  mutate(Week_lifted = case_when(Week_lifted == "All" ~ "ALL",
                                 Week_lifted == 4 ~ "Did not lift",
                                 Week_lifted == 3 ~ "17-Mar-22",
                                 Week_lifted == 2 ~ "10-Mar-22",
                                 Week_lifted == 1 ~ "03-Mar-22"
                                 ),
         Group_week = case_when(Group_week == 1 ~ "Pre-Omicron (Weeks 1-10, n= 10 weeks)",
                                Group_week == 2 ~ "Omicron BA.1 (Weeks 11-25, n= 15 weeks)",
                                Group_week == 3 ~ "Post-Lifting/ Omicron BA.2+ (Weeks 26-40, n=15 weeks)")) %>%
  pivot_wider(names_from = Group_week, values_from = values)

names(df_tabla)[1] <- "Week Masking Requirement Lifted"
names(df_tabla)[3] <- "n Districts"

df_tabla %>%
  gt(groupname_col = "names",
     caption = "Tabla 1. Porcentaje de casos pre-Omicron, durante la ola Omicron BA.1, y después de la eliminación de la restricción de las mascarillas") %>% 
  summary_rows(
    groups = TRUE
  )
```

# Preprocesado de los Datos

## Data Cleaning

### 2-week reporting weeks

```{r}
week2correction <- function(df_raw){
  
  for (population in c("Students","Staff")){
    df_wider <- df_raw %>%
      select(Date,Name,all_of(population)) %>%
      pivot_wider(names_from = Name, values_from = population)
    
    for (i in 2:nrow(df_wider)){
      if(df_wider$Date[i] - df_wider$Date[i-1] == 14){
        aux <- df_wider[i,2:ncol(df_wider)] / 2
        df_wider[i,2:ncol(df_wider)] <- df_wider[i,2:ncol(df_wider)] / 2
        aux <- cbind(Date=c(df_wider$Date[i]-7),aux)
        df_wider <- rbind(df_wider,aux)
        }
    }
    
    df_wider <- df_wider %>% arrange(Date)
    
    df_raw_aux <- df_wider %>%
      pivot_longer(2:ncol(df_wider),names_to = "Name", 
                   values_to = paste0(population,"_corr"))
    
    df_raw <- df_raw %>% full_join(df_raw_aux, by=c("Name","Date"))
  }
  
  df_raw <- df_raw %>% 
    mutate(All_corr = Students_corr + Staff_corr) %>% 
    filter(!is.na(All_corr)) %>% 
    select(-c(Code,Week_lifted,Neighboring)) %>% 
    left_join(selected_districts) %>% 
    arrange(Date)
  
  return(df_raw)
}
```

```{r}
df_cor <- week2correction(df_raw)
df_cor %>% 
  select(Name,Date,Students_corr) %>% 
  pivot_wider(names_from = Name, values_from = Students_corr)
```

### Zero reporting weeks

```{r}
cases0correction1 <- function(df_cor){
  media_movil <- data.frame(Name=NULL,Date=NULL,All_corr=NULL,media=NULL)
  for(name in unique(df_cor$Name)){
    aux <- df_cor %>%
      filter(Name == name) %>%
      select(Name,Date,All_corr) %>%
      mutate(media = (rollmean(All_corr,k=5,fill=NA,align="right")-All_corr/5)*(5/4))
    media_movil <- rbind(media_movil,aux)
  }
    
  df_cor <- df_cor %>%
    left_join(media_movil %>% select(-All_corr), by = c("Name","Date")) %>%
    mutate(Students_corr = ifelse(All_corr == 0 & (PPT >= 1 | (!is.na(media) & media > 10)),NA,Students_corr),
           Staff_corr = ifelse(All_corr == 0 & (PPT >= 1 | (!is.na(media) & media > 10)),NA,Staff_corr),
           All_corr = ifelse(All_corr == 0 & (PPT >= 1 | (!is.na(media) & media > 10)),NA,All_corr)) %>% 
    select(Code,Name,Week_lifted,Date,Students_corr,Staff_corr,All_corr)
  
  return(df_cor)
}
```

```{r}
df_cor <- cases0correction1(df_cor)
df_cor
```

```{r}
df_cor %>%
  select(Date, Name, Students_corr) %>%
  pivot_wider(names_from = Name, values_from = Students_corr)
```

```{r}
cases0correction2 <- function(df_cor){
  for(name in unique(df_cor$Name)){
    aux <- df_cor %>%
      filter(Name == name)
    
    for(i in 1:(nrow(aux)-1)){
      if(is.na(aux$All_corr[i])){
        df_cor$Students_corr[df_cor$Date==aux$Date[i] & df_cor$Name==name] <- df_cor$Students_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] / 2
        df_cor$Students_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] <- df_cor$Students_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] / 2
        
        df_cor$Staff_corr[df_cor$Date==aux$Date[i] & df_cor$Name==name] <- df_cor$Staff_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] / 2
        df_cor$Staff_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] <- df_cor$Staff_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] / 2
        
        df_cor$All_corr[df_cor$Date==aux$Date[i] & df_cor$Name==name] <- df_cor$All_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] / 2
        df_cor$All_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] <- df_cor$All_corr[df_cor$Date==aux$Date[i+1] & df_cor$Name==name] / 2
      }
    }
  }
  
  return(df_cor)
}
```

```{r}
df_cor <- cases0correction2(df_cor)
df_cor <- cases0correction2(df_cor)
df_cor %>%
  select(Date, Name, Students_corr) %>%
  pivot_wider(names_from = Name, values_from = Students_corr)
```


## Population Weighted

```{r}
enrollmentbygrade <- read_excel("data/enrollmentbygrade.xlsx", 
    skip = 1)
  
df_weighted <- enrollmentbygrade %>%
  rename(Code = `District Code`,
         N_Students = Total) %>%
  select(Code, N_Students) %>%
  mutate(N_Students = as.numeric(str_remove_all(N_Students,","))) %>%
  right_join(df_cor, by = c("Code")) %>%
  mutate(Week = round(as.numeric((Date - as.Date("2021-09-9"))/7)),
       Students_weighted = Students_corr / N_Students) %>% 
  filter(!is.na(Students_weighted)) %>% 
  mutate(mask_lifted = case_when(Week_lifted == 1 & Week >= 26 ~ TRUE,
                                 Week_lifted == 2 & Week >= 27 ~ TRUE,
                                 Week_lifted == 3 & Week >= 28 ~ TRUE,
                                 .default = FALSE))


```


# Análisis Estadístico

## Evolución

```{r}
df_weighted$Students_mm <- NA
for (district in unique(df_weighted$Name)) {
  df_weighted$Students_mm[df_weighted$Name==district]=rollmean(df_weighted$Students_weighted[df_weighted$Name==district],k=3,fill=NA,align ="center")
}
```

```{r}
df_weighted %>% 
  group_by(Date,Week_lifted) %>% 
  summarise(media = mean(Students_mm,na.rm=TRUE)) %>%
  ggplot(aes(x = Date, y = media * 1000, color = Week_lifted)) +
  geom_point() +
  geom_line() +
  xlim(as.Date("2022-01-15"),NA) +
  theme_minimal()
```

## Modelo con datos

```{r}
df_model <- df_weighted %>% 
  mutate(treated = ifelse(Week_lifted != 4, 1, 0),
         first.treat = case_when(Week_lifted == 1 ~ 26,
                                Week_lifted == 2 ~ 27,
                                Week_lifted == 3 ~ 28,
                                .default = 0),
         Students_weighted = Students_weighted * 1000,
         Code = as.numeric(Code)) %>% 
  select(Week,Code,Students_weighted,first.treat,treated,mask_lifted)
```

```{r}
out <- att_gt(yname = "Students_weighted",
              gname = "first.treat",
              idname = "Code",
              tname = "Week",
              data = df_model,
              est_method = "reg",
              control_group = "notyettreated")

summary(out)
```

```{r}
ggdid(out)
```

```{r}
es <- aggte(out, type = "dynamic")
summary(es)
```

```{r}
ggdid(es)
```

```{r}

agg_df <- data.frame(
  Time = es$egt,      # Tiempo relativo al tratamiento
  Effect = es$att.egt, # Efecto estimado en cada período
  SE = es$se.egt,      # Error estándar
  CI_lower = es$att.egt - 1.96 * es$se.egt,  # Límite inferior del IC 95%
  CI_upper = es$att.egt + 1.96 * es$se.egt,   # Límite superior del IC 95%
  post = ifelse(es$egt >= 0, "1", "0")
)

ggplot(agg_df, aes(x = Time, y = Effect)) +
  geom_polygon(data = data.frame(x = c(-11.5,-11.5,-5.5,-5.5), y = c(-10,20,20,-10)), aes(x = x, y = y), fill = "#f3f3f4") +
  geom_hline(yintercept = 0, color = "grey", linetype = 2, size = 0.5) +
  geom_vline(xintercept = 0, color = "grey", linetype = 2, size = 0.5) +
  geom_errorbar(aes(ymin = CI_lower, ymax = CI_upper, color = post), alpha = 0.7) +
  geom_point(aes(fill = post),color = "black", shape=21, size=3) +
  scale_fill_manual(breaks = c("0","1"),
                     values = c("#6996ab","#286981")) +
  scale_color_manual(breaks = c("0","1"),
                     values = c("#6996ab","#286981")) +
  labs(title = "Efecto Dinámico del Tratamiento",
       x = "Tiempo Relativo",
       y = "Efecto Estimado") +
  theme_tfg +
  theme(legend.position = "None")
```


```{r}
group_effects <- aggte(out, type = "group")
summary(group_effects)
```

# Análisis Descriptivo

```{r}
showstudentsrace <- function(){
  enrollmentbyracegender <- read_excel("data/enrollmentbyracegender.xlsx",skip = 1)
  
  enrollmentbyracegender[,3:12] <- apply(enrollmentbyracegender[,3:12], 2,
                                         function(x){as.numeric(str_remove(x,","))})
  
  enrollmentbyracegender <- enrollmentbyracegender %>%
    inner_join(selected_districts %>%
                 filter(Week_lifted != -1) %>%
                 select(Code,Week_lifted),
               by = c("District Code" = "Code"))
  
  enrollmentbyracegender$african_scale <- scale(enrollmentbyracegender$`African American`)[,1]
  enrollmentbyracegender$asian_scale <- scale(enrollmentbyracegender$`Asian`)[,1]
  enrollmentbyracegender$hispanic_scale <- scale(enrollmentbyracegender$`Hispanic`)[,1]
  enrollmentbyracegender$white_scale <- scale(enrollmentbyracegender$`White`)[,1]
  
  enrollmentbyracegender <- enrollmentbyracegender %>%
    select(`District Code`,Week_lifted,african_scale,asian_scale,hispanic_scale,white_scale)
  
  graf <- enrollmentbyracegender %>%
    pivot_longer(3:6,names_to = "names",values_to = "values") %>%
    ggplot(aes(x = names, y = values, fill = Week_lifted)) +
    geom_hline(yintercept = 0, color = "grey", linetype = 2, size = 0.8) +
    geom_point(aes(color = Week_lifted), position = position_jitterdodge(jitter.width = 0.2), alpha = 0.4) +
    geom_boxplot(outliers = FALSE, alpha = 0.4) +
    stat_summary(aes(color = Week_lifted), fun.y="mean", shape=23, position = position_jitterdodge(jitter.width = 0)) +
    scale_y_continuous(breaks=seq(-3,6,1), limits = c(-3,6)) +
    scale_x_discrete(labels=c("african_scale" = "Porcentaje\nNegros",
                              "asian_scale" = "Porcentaje\nAsiáticos",
                              "hispanic_scale" = "Porcentaje\nHispanos",
                              "white_scale" = "Porcentaje\nBlancos")) +
    labs(y = "Valores Escalados de la Variable", title = "Distribución de los Estudiantes de Acuerdo a la Raza o Grupo Étnico") +
    theme_tfg
  
  return(graf)
}
```

```{r}
showstudentsrace()
```

```{r}
showstudentspopulations <- function(){
  selectedpopulations <- read_excel("data/selectedpopulations.xlsx",
                                    skip = 1)
  
  selectedpopulations[,3:18] <- apply(selectedpopulations[,3:18], 2, function(x){as.numeric(str_remove(x,","))})
  
  selectedpopulations <- selectedpopulations %>%
    select(`District Code`, `English Language Learner %`, `Students With Disabilities %`, `Low Income %`)
  
  selectedpopulations <- selectedpopulations %>% 
    inner_join(selected_districts %>% 
                 filter(Week_lifted != -1) %>% 
                 select(Code,Week_lifted), 
               by = c("District Code" = "Code"))
  
  selectedpopulations$lis_scale <- scale(selectedpopulations$`Low Income %`)[,1]
  selectedpopulations$sd_scale <- scale(selectedpopulations$`Students With Disabilities %`)[,1]
  selectedpopulations$ell_scale <- scale(selectedpopulations$`English Language Learner %`)[,1]
  
  selectedpopulations <- selectedpopulations %>%
    select(`District Code`,Week_lifted,lis_scale,sd_scale,ell_scale)
  
  graf <- selectedpopulations %>%
    pivot_longer(3:5,names_to = "names",values_to = "values") %>%
    ggplot(aes(x = names, y = values, fill = Week_lifted)) +
    geom_hline(yintercept = 0, color = "grey", linetype = 2, size = 0.8) +
    geom_point(aes(color = Week_lifted), position = position_jitterdodge(jitter.width = 0.2), alpha = 0.4) +
    geom_boxplot(outliers = FALSE, alpha = 0.4) +
    stat_summary(aes(color = Week_lifted), fun.y="mean", shape=23, position = position_jitterdodge(jitter.width = 0))+
    scale_y_continuous(breaks=seq(-2,4,1), limits = c(-2,4.5)) +
    scale_x_discrete(limits = c("lis_scale","sd_scale","ell_scale"),
                     labels=c("lis_scale" = "Porcentaje de\nEstudiantes con\nBajos Ingresos",
                              "sd_scale" = "Porcentaje de\nEstudiantes con\n Discapacidad",
                              "ell_scale" = "Porcentaje de\nEstudiantes ELL")) +
    labs(y = "Valores Escalados de la Variable", title = "Distribución de los Estudiantes en Poblaciones Seleccionadas por DESE") +
    theme_tfg
  
  return(graf)
}
```

```{r}
showstudentspopulations()
```

```{r}
showstaffrace <- function(){
  staffracegender <- read_excel("data/staffracegender.xlsx",
                                skip = 1)
  
  staffracegender[,3:12] <- apply(staffracegender[,3:12], 2, function(x){as.numeric(str_remove(x,","))})
  staffracegender <- staffracegender %>%
    select(`District/School Code`, `African American (%)`, `Asian (%)`, `Hispanic (%)`, `White (%)`)
  staffracegender <- staffracegender %>%
    inner_join(selected_districts %>%
                 filter(Week_lifted != -1) %>%
                 select(Code,Week_lifted),
               by = c("District/School Code" = "Code"))
  
  staffracegender$african_scale <- scale(staffracegender$`African American (%)`)[,1]
  staffracegender$asian_scale <- scale(staffracegender$`Asian (%)`)[,1]
  staffracegender$hispanic_scale <- scale(staffracegender$`Hispanic (%)`)[,1]
  staffracegender$white_scale <- scale(staffracegender$`White (%)`)[,1]
  
  staffracegender <- staffracegender %>%
    select(`District/School Code`,Week_lifted,african_scale,asian_scale,hispanic_scale,white_scale)
  
  graf <- staffracegender %>%
    pivot_longer(3:6,names_to = "names",values_to = "values") %>%
    ggplot(aes(x = names, y = values, fill = Week_lifted)) +
    geom_hline(yintercept = 0, color = "grey", linetype = 2, size = 0.8) +
    geom_point(aes(color = Week_lifted), position = position_jitterdodge(jitter.width = 0.2), alpha = 0.4) +
    geom_boxplot(outliers = FALSE, alpha = 0.4) +
    stat_summary(aes(color = Week_lifted), fun.y="mean", shape=23, position = position_jitterdodge(jitter.width = 0)) +
    scale_y_continuous(breaks=seq(-5,7,1), limits = c(-5,7)) +
    scale_x_discrete(labels=c("african_scale" = "Porcentaje\nNegros",
                              "asian_scale" = "Porcentaje\nAsiáticos",
                              "hispanic_scale" = "Porcentaje\nHispanos",
                              "white_scale" = "Porcentaje\nBlancos")) +
    labs(y = "Valores Escalados de la Variable", title = "Distribución del Staff de Acuerdo a la Raza o Grupo Étnico") +
    theme_tfg
  
  return(graf)
}
```


```{r}
showstaffrace()
```

